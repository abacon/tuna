name: nightly
on:
  pull_request:
    paths-ignore:
      - '**.md'
      - '**.ini'
      - '**.html'
      - '**.js'
  push:
    paths-ignore:
      - '**.md'
      - '**.ini'
      - '**.html'
      - '**.js'
    branches:
    - master
    - test
    tags:
    - "v*"
jobs:
  macos64:
    name: "macOS 64-bit"
    runs-on: [macos-latest]
    env:
      QT_VERSION: 5
      arch: x86_64
      MACOS_DEPS_ARCH: 'x86_64'
      project-git: tuna
      project-name: tuna
      obs-studio-version: 27.2.4
      # obs-studio stuff
      CACHE_REVISION: '004'
      CEF_BUILD_VERSION_MAC: '4638'
      CEF_HASH_MAC_X86_64: '2fe4cc39b1373b85086e4030dedd2a250d5dbbed8c2f8780002d6cd6214b6bc2'
      CEF_HASH_MAC_ARM64: '27809aac427b9c97b0dadcab04371c5f8211f36c6f3e1caa00822de89c5ed249'
      CEF_BUILD_VERSION_LINUX: '4638'
      CEF_BUILD_VERSION_WIN: '4638'
      QT_VERSION_MAC: '5.15.2'
      QT_HASH_MAC_X86_64: '13787c6c21b931373833652d5016dd80634110c2b735eb0bf03b4c77b86a4489'
      QT_HASH_MAC_ARM64: 'a94450719eaf738c8a29f1375757f832e9bfb02c02e5333ed9cde6fa85860a27'
      QT_HASH_MAC_UNIVERSAL: 'f8885ba0952740dc3f0d2bf966a05cc181e1dcd17a43bcf14f9a480fd95d65d1'
      DEPS_VERSION_MAC: '2022-07-18'
      DEPS_HASH_MAC_X86_64: 'd2fc48e4cbcef840d59d6122f0e78f69602ff8f6264ea9a6fdfcfce88607e98d'
      DEPS_HASH_MAC_ARM64: '1386418e41a60d83dd7de8742ede3d13ebb27b40ded6e7e41c00fd85a677a09d'
      VLC_VERSION_MAC: '3.0.8'
      VLC_HASH_MAC: 'e0149ef4a20a19b9ecd87309c2d27787ee3f47dfd47c6639644bc1f6fd95bdf6'
    steps:
      - name: Checkout plugin
        uses: actions/checkout@v2
        with:
          path: ${{ github.workspace }}
          submodules: 'recursive'
      - name: 'Get ${{ env.project-git }} git info'
        shell: bash
        working-directory: ${{ github.workspace }}
        run: |
          git fetch --prune
          echo "GIT_BRANCH=${{ github.event.pull_request.head.ref }}" >> $GITHUB_ENV
          echo "GIT_HASH=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
          echo "GIT_TAG=$(git describe --always --tags --abbrev=0)" >> $GITHUB_ENV
      - name: Cache OBS build
        id: cache-obs-build-macos
        uses: actions/cache@v1
        with:
          path: ${{ github.workspace }}/obs-studio
          key: obs-build-macos-${{ runner.os }}-pr-${{ env.CACHE_NAME }}-${{ env.arch }}-${{ env.CACHE_DATE }}
      - name: Checkout OBS
        if: steps.cache-obs-build-macos.outputs.cache-hit != 'true'
        uses: actions/checkout@v3
        with:
          repository: obsproject/obs-studio
          submodules: recursive
          fetch-depth: 0
          path: ${{ github.workspace }}/obs-studio
      # - name: 'Fetch prune'
      #   if: steps.cache-obs-build-macos.outputs.cache-hit != 'true'
      #   run: git fetch --prune --unshallow
      # - name: 'Get OBS-Studio git info'
      #   shell: bash
      #   working-directory: ${{ github.workspace }}/obs-studio
      #   run: |
      #     echo "OBS_GIT_BRANCH=$(git rev-parse --abbrev-ref HEAD)" >> $GITHUB_ENV
      #     echo "OBS_GIT_HASH=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
      #     echo "OBS_GIT_TAG=$(git describe --always --tags --abbrev=0)" >> $GITHUB_ENV

      - name: 'Restore ccache from cache'
        id: ccache-cache
        uses: actions/cache@v3
        env:
          CACHE_NAME: 'ccache-cache'
        with:
          path: ${{ github.workspace }}/.ccache
          key: ${{ runner.os }}-pr-${{ env.CACHE_NAME }}-${{ env.arch }}-${{ env.CACHE_DATE }}

      - name: 'Restore Chromium Embedded Framework from cache'
        id: cef-cache
        uses: actions/cache@v3
        env:
          CACHE_NAME: 'cef-cache'
        with:
          path: ${{ github.workspace }}/obs-build-dependencies/cef_binary_${{ env.CEF_BUILD_VERSION_MAC }}_macos_${{ env.arch }}
          key: ${{ runner.os }}-pr-${{ env.CACHE_NAME }}-${{ env.CEF_BUILD_VERSION_MAC }}-${{ env.arch }}-${{ env.CACHE_REVISION }}

      - name: 'Restore VLC dependency from cache'
        id: vlc-cache
        uses: actions/cache@v3
        env:
          CACHE_NAME: 'vlc-cache'
        with:
          path: ${{ github.workspace }}/obs-build-dependencies/vlc-${{ env.VLC_VERSION_MAC }}
          key: ${{ runner.os }}-pr-${{ env.CACHE_NAME }}-${{ env.VLC_VERSION_MAC }}-${{ env.CACHE_REVISION }}
      - name: install OBS dependencies
        shell: bash
        run: |
          cd ${{ github.workspace }}/obs-studio
          CI/macos/01_install_dependencies.sh --architecture "${{ env.arch }}"
      - name: 'Build OBS'
        if: steps.cache-obs-build-macos.outputs.cache-hit != 'true'
        run: |
          cd ${{ github.workspace }}/obs-studio
          CI/macos/02_build_obs.sh --architecture "${{ env.arch }}"
      - name: Configure and build plugin
        shell: bash
        run: |
          cd ${{ github.workspace }}
          echo "=> Building plugin for macOS."
          echo "GIT_TAG=$(git describe --always --tags --abbrev=0)" >> $GITHUB_ENV
          mkdir -p build && cd build
          cmake .. \
            -DQTDIR="${{ github.workspace }}/obs-build-dependencies"
            -DLIBOBS_INCLUDE_DIR=${{ github.workspace }}/obs-studio/libobs \
            -DLIBOBS_LIB=${{ github.workspace }}/obs-studio/build/libobs/libobs.dylib \
            -DOBS_FRONTEND_LIB:STRING="${{ github.workspace }}/obs-studio/build/UI/obs-frontend-api/libobs-frontend-api.dylib" \
            -DCMAKE_BUILD_TYPE=RelWithDebInfo \
            -DCREDS="${{ secrets.SPOTIFY_TOKEN }}" \
            -DLASTFM_CREDS="${{ secrets.LASTFM_KEY }}" \
            -DCMAKE_INSTALL_PREFIX=/usr \
          && make -j4
      # - name: 'Install prerequisite: Packages app'
      #   if: success()
      #   shell: bash
      #   run: |
      #     curl -L -O http://s.sudre.free.fr/Software/files/Packages.dmg
      #     sudo hdiutil attach ./Packages.dmg
      #     sudo installer -pkg /Volumes/Packages\ 1.2.9/Install\ Packages.pkg -target /
      # - name: Package
      #   working-directory: ${{ github.workspace }}
      #   if: success()
      #   shell: bash
      #   run: |
      #     echo "=> Modifying ${{ env.project-name }}.so"
      #     install_name_tool \
      #     -change /tmp/obsdeps/lib/QtWidgets.framework/Versions/5/QtWidgets \
      #       @executable_path/../Frameworks/QtWidgets.framework/Versions/5/QtWidgets \
      #     -change /tmp/obsdeps/lib/QtGui.framework/Versions/5/QtGui \
      #       @executable_path/../Frameworks/QtGui.framework/Versions/5/QtGui \
      #     -change /tmp/obsdeps/lib/QtCore.framework/Versions/5/QtCore \
      #       @executable_path/../Frameworks/QtCore.framework/Versions/5/QtCore \
      #     ./build/lib${{ env.project-name }}.so
      #     otool -L ./build/lib${{ env.project-name }}.so
      #     packagesbuild ./package/installer-macOS.pkgproj
      #     mv ./package/build/*.pkg ./package/${{ env.project-name }}.${{ env.GIT_TAG }}.macos.pkg
      # - name: Publish
      #   if: success()
      #   uses: actions/upload-artifact@v2-preview
      #   with:
      #     name: '${{ env.project-name }}.${{ env.GIT_TAG }}.installer.macos'
      #     path: ./package/*.pkg
